*** Learning Order ***

1. Introduction to TypeScript (Done)
   + What is TypeScript?
   + Setting up TypeScript
   + TypeScript vs JavaScript
   + Compiling TypeScript (tsc command)

2. Basic Types (Done)
   + Primitive types: string, number, boolean
   + Arrays and Tuples
   + Enums
   + any, unknown, void, null, and undefined
   + Type inference

3. Type Annotations (Done)
   + Variable type annotations
   + Function type annotations (parameters and return types)
   + Optional and default parameters
   + Rest parameters

4. Interfaces
   - Defining interfaces
   - Optional properties
   - Readonly properties
   - Extending interfaces
   - Interface vs Type alias

5. Classes
   - Introduction to classes
   - Class properties and methods
   - Constructors and parameter properties
   - Inheritance and method overriding
   - Access modifiers: public, private, protected
   - Readonly properties
   - Static properties and methods
   - Abstract classes and methods

6. Advanced Types
   - Union and Intersection types
   - Literal types
   - Type aliases
   - Type assertions (casting)
   - Non-null assertion operator (!)
   - Index signatures
   - keyof and typeof operators

7. Functions in Depth
   - Function types
   - Higher-order functions
   - Function overloads
   - Generic functions

8. Generics
   - Introduction to generics
   - Generic functions
   - Generic interfaces
   - Generic classes
   - Generic constraints

9. Modules
   - ES Modules vs CommonJS
   - Importing and exporting modules
   - Default exports vs named exports
   - Re-exporting

10. Namespaces
   - Introduction to namespaces
   - Nested namespaces
   - Merging namespaces

11. Advanced Type Features
   - Conditional types
   - Mapped types
   - Utility types (e.g., Partial, Pick, Omit, Record, Exclude, etc.)
   - Discriminated unions
   - Type guards and type narrowing

12. Decorators (Optional)
   - Introduction to decorators
   - Class, method, property, and parameter decorators
   - Decorators in TypeScript with experimentalDecorators

13. Working with External Libraries
   - Using third-party libraries with TypeScript
   - Type definitions (@types)
   - Writing your own type definitions
   - tsconfig.json configuration

14. TypeScript in the Real World
   - Integrating TypeScript with build tools (Webpack, Babel)
   - TypeScript with popular frameworks (React, Node.js, Angular)
   - TypeScript in a full-stack project

15. Testing TypeScript
   - Writing tests in TypeScript
   - Using testing frameworks (Jest, Mocha) with TypeScript

16. Best Practices
   - Code organization and structure
   - Type safety best practices
   - Avoiding common TypeScript pitfalls

17. Advanced Topics (Optional)
   - TypeScript with DDD (Domain-Driven Design)
   - Advanced TypeScript with Functional Programming

18. Final Projects and Real-World Applications
   - Building a complete project in TypeScript
   - Contributing to open-source TypeScript projects
   - Refactoring an existing JavaScript project to TypeScript

19. Conclusion
   - Reviewing and solidifying concepts
   - Exploring TypeScriptâ€™s future roadmap and ecosystem

************************************************************************************************************
## 1. Introduction to TypeScript ##

* What is Typescript ?
- TypeScript is a statically typed superset of JavaScript
- It adds optional static typing to the language, which helps in identifying errors
during development rather than at runtime
- TypeScript builds on JavaScript by adding syntax for types, allowing developers to catch potential
bugs early and write more maintainable code

o Static Typing: This means you can define the types of variables, function parameters, and function
return values
o Superset of JavaScript


* Setting up TypeScript
- To start using TypeScript, you need to install it on your development environment
1. Install Nodejs
2. Install Typescript: Open your terminal and yun the following command :
> npm install -g typescript
- This command installs TypeScript globally on your machine.
3. Create a TypeScript file: .ts file

* TypeScript vs JavaScript
o Typing: The most significant difference is that TypeScript has a type system. In JavaScript, you can assign any type of value to a variable, while in TypeScript, you can (and often should) specify the type.
o Error Checking: TypeScript catches type-related errors at compile time, whereas JavaScript only throws errors during runtime.
o Object-Oriented Programming: TypeScript has features like interfaces, generics, and access modifiers (public, private, protected), which are not present in JavaScript.
o Tooling: TypeScript offers better tooling support with autocompletion, refactoring, and navigation through your codebase due to its type system.

* Compiling TypeScript (tsc command)
- TypeScript code needs to be compiled into JavaScript because browsers and Node.js engines only 
understand JavaScript
- TypeScript provides a compiler called "tsc" to perform this task

o Compiling a single file: If you have a file app.ts, you can compile it to JavaScript by running : 
> tsc app.ts
- This will generate a corresponding app.js file

o Watch Mode: You can also use "tsc" in watch mode, where it automatically recompiles the TypeScript code 
whenever you save the file. Use the following command : 
> tsc app.ts --watch

o Configuration File: For larger projects, you can create a "tsconfig.json" file to specify TypeScript 
compiler options : 
> tsc --init
> tsc --watch : watching all .ts files and compiling to js whenever some of them has changed

----------------------------------------------------------------------------------------------------------------

## 2. Basic Types ##

* Primitive Types: `string`, `number`, `boolean`
- These are the most basic types in TypeScript, corresponding to the primitive types in JavaScript.
  - `string`: Used for text values.
  - `number`: Used for numeric values, including integers and floating-point numbers.
  - `boolean`: Used for true/false values.

o Example:
  ```typescript
  let name: string = "John";
  let age: number = 30;
  let isStudent: boolean = true;
  ```

* Arrays and Tuples
- TypeScript allows you to specify the type of elements in an array and define arrays with fixed numbers of elements using tuples.

o Arrays: You can declare an array of a specific type.
  - Example:
    ```typescript
    let numbers: number[] = [1, 2, 3];
    let names: string[] = ["Alice", Bob", "Charlie"];
    ```

o Tuples: An array with fixed types and length.
  - Example:
    ```typescript
    let person: [string, number];
    person = ["Alice", 25]; // Correct
    person = [25, "Alice"]; // Error
    ```

* Enums
- Enums allow you to define a set of named constants. TypeScript supports both numeric and string enums.

o Numeric Enums:
  - Example:
    ```typescript
    enum Direction {
      Up = 1,
      Down,
      Left,
      Right
    }
    let dir: Direction = Direction.Up;
    ```

o String Enums:
  - Example:
    ```typescript
    enum Direction {
      Up = "UP",
      Down = "DOWN",
      Left = "LEFT",
      Right = "RIGHT"
    }
    let dir: Direction = Direction.Left;
    ```

* `any`, `unknown`, `void`, `null`, and `undefined`
- These types are used for specific scenarios when dealing with uncertain or absence of types.

o `any`: Disables type checking, allowing any type of value.
  - Example:
    ```typescript
    let something: any = 5;
    something = "Now I'm a string";
    ```

o `unknown`: Similar to `any` but safer, requires a type check before performing operations.
  - Example:
    ```typescript
    let something: unknown = "Hello";
    if (typeof something === "string") {
      console.log(something.toUpperCase()); // OK
    }
    ```

o `void`: Usually used as the return type for functions that do not return a value.
  - Example:
    ```typescript
    function logMessage(message: string): void {
      console.log(message);
    }
    ```

o `null` and `undefined`: Types with exactly one value `null` and `undefined` respectively.
  - Example:
    ```typescript
    let u: undefined = undefined;
    let n: null = null;
    ```

* Type Inference
- TypeScript can automatically infer the type of a variable based on its initial value, reducing the need for explicit type annotations.

o Example:
  - Example:
    ```typescript
    let num = 5; // TypeScript infers the type as `number`
    num = "Hello"; // Error: Type 'string' is not assignable to type 'number'
    ```












************************************************************************************************************